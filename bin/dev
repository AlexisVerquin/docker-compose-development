#!/bin/bash

init() {

    DEV_SELF=$(basename $0);

    DEV_DIR=$(realpath $(dirname $0));
    DEV_WORKDIR=$(dirname ${DEV_DIR});
    DEV_PROJECT=$(basename ${DEV_WORKDIR});
    DEV_USERDIR=${PWD};

    DEV_COMMANDDIR=${DEV_DIR}/dev_command;

    DEV_WORKSPACE="`echo ${DEV_WORKDIR}/workspace | sed -e 's/\\//\\\\\//g'`";
    DEV_PROJECTDIR=`echo ${DEV_USERDIR} | sed -e "s/${DEV_WORKSPACE}\///"`;

    DEV_PHP='php70';

    DEV_SUDO='';
    if [ -z "`groups | grep docker`" ]; then
        DEV_SUDO='sudo';
    fi

    dc yml 'docker-compose.yml';
    dc yml_if 'build/dist/docker-compose-blackfire.yml' 'conf/blackfire';
    dc yml_if 'docker-custom.yml' 'docker-custom.yml';
    dc yml_os;
    dc yml_ssh;

    dc mode 'run --rm';

    DEV_DOCKEROPTS='';
    DEV_COMMAND=$1;
    DEV_HOSTNAME='';

    if [ "${DEV_PROJECTDIR}" == "${DEV_USERDIR}" ]; then
        # Not in WORKSPACE
        DEV_PROJECTDIR='';
    else
        DEV_HOSTNAME=`echo ${DEV_PROJECTDIR} | sed -e 's/\//\./g' -e 's/^\([^\.]*\.[^\.]*\)\.\{0,1\}.*$/\\1.dev/'`;
        if [ ".." != "`echo ${DEV_HOSTNAME} | sed -e 's/[^\.]//g'`" ]; then
            DEV_HOSTNAME='';
        fi
    fi

    # Check which php version to use
    dc php;

    # Change to command directory
    # This is so all docker-compose commands work out of the box
    cd ${DEV_COMMANDDIR};

    # Check if command exists and is executable
    DEV_EXISTS=false;
    if [ -n "${DEV_COMMAND}" ] && [ -f "${DEV_COMMAND}" ]; then
        DEV_EXISTS=true;
    fi
}

dc() {

    show() {
        echo `getsudo`docker-compose ${DEV_YML} ${DEV_MODE} \
            ${DEV_DOCKEROPTS} \
            ${DEV_SERVICE} \
            "${DEV_CMD}";
    }

    getsudo() {
        # Check if user is in docker group
        [ -n "${DEV_SUDO}" ] && echo -n ${DEV_SUDO}' ';
    }

    run() {
        cmd=`show`;
        ${cmd};
        return $?
    }

    opt() {
        DEV_DOCKEROPTS=${DEV_DOCKEROPTS}' '$*;
    }

    service() {
        DEV_SERVICE=$*;
    }

    yml_if() {
        local yml=$1;
        shift;

        while [ -n "$1" ]; do
            if [ ! -e ${DEV_WORKDIR}/$1 ]; then
                return 1;
            fi
            shift;
        done

        yml ${yml};
        return 0;
    }

    yml_all() {
        yml_if 'build/dist/docker-compose-blackfireclient.yml' 'conf/blackfire';
        yml 'build/dist/docker-compose-dbclient.yml';
        yml 'build/dist/docker-compose-mytop.yml';
        yml 'build/dist/docker-compose-ngrok.yml';
        yml 'build/dist/docker-compose-ctop.yml';
    }

    yml() {
        if [ -n "`echo $DEV_YML | grep $1`" ]; then
            return;
        fi
        DEV_YML=${DEV_YML}' -f '${DEV_WORKDIR}'/'$1;
    }

    yml_os() {
        if [[ "$(uname)" == 'Darwin' ]]; then
            DEV_YML=${DEV_YML}' -f '${DEV_WORKDIR}'/docker-compose-osx.yml';
        elif [[ -n "`uname -r | grep Microsoft`" ]]; then
            DEV_YML=${DEV_YML}' -f '${DEV_WORKDIR}'/docker-compose-wsl.yml';
        else
            DEV_YML=${DEV_YML}' -f '${DEV_WORKDIR}'/docker-compose-linux.yml';
        fi
    }

    yml_ssh() {
        if [ -n "${SSH_AUTH_SOCK}" ]; then
            yml build/dist/docker-compose-ssh.yml;
        fi
    }

    mode() {
        DEV_MODE=$*;
    }

    cmd() {
        DEV_CMD="$*";
    }

    php() {
        local available="`grep -h '^\s*- php[0-9][0-9]:fpm' ${DEV_WORKDIR}/docker-*.yml | sed -e 's/\(\s*\|:.*$\|-\)//g' | sort -ur`";
        check() {
            local base=$1;
            for a in ${available}; do
                if [ -e ${base}/.${a} ]; then
                    DEV_PHP=${a};
                    return 0;
                fi
            done

            return 1;
        }

        local project=${DEV_WORKDIR}/workspace/${DEV_PROJECTDIR};
        if [ -n "${DEV_PROJECTDIR}" ]; then
            while [ "${project}" != "${DEV_WORKDIR}/workspace" ]; do
                check ${project} && return 0;
                project=$(dirname ${project});
            done
        fi

        check $DEV_WORKDIR/workspace && return 0;
        return 1;
    }

    $*;
    return $?
}

exec() {
    # Load command
    # Can exit if implemented itself
    . ./${DEV_COMMAND} $*;

    # Execute command
    dc run;
    exit $?;
}

usage() {
    echo "Usage ${DEV_SELF} ["`ls`"]";
    exit 1;
}

main() {
    init $@;
    shift;

    ${DEV_EXISTS} && exec $@ || usage;
}

main $@;
